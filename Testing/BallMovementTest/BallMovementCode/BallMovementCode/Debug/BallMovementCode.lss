
BallMovementCode.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000230  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000002a4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000011c  00800060  00800060  000002a4  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000002a4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000002d4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000068  00000000  00000000  00000310  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000008dc  00000000  00000000  00000378  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000006a0  00000000  00000000  00000c54  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000004b9  00000000  00000000  000012f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000d4  00000000  00000000  000017b0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003ed  00000000  00000000  00001884  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000001f5  00000000  00000000  00001c71  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000088  00000000  00000000  00001e66  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	21 e0       	ldi	r18, 0x01	; 1
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	ac 37       	cpi	r26, 0x7C	; 124
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 05 01 	call	0x20a	; 0x20a <main>
  74:	0c 94 16 01 	jmp	0x22c	; 0x22c <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <displaytMatrix>:
void playMusic() {
	
}

/* assigned to TBA */
void displayLCD() {
  7c:	40 e0       	ldi	r20, 0x00	; 0
  7e:	50 e0       	ldi	r21, 0x00	; 0
  80:	22 c0       	rjmp	.+68     	; 0xc6 <displaytMatrix+0x4a>
  82:	42 bb       	out	0x12, r20	; 18
  84:	80 e0       	ldi	r24, 0x00	; 0
  86:	90 e0       	ldi	r25, 0x00	; 0
  88:	19 c0       	rjmp	.+50     	; 0xbc <displaytMatrix+0x40>
  8a:	fc 01       	movw	r30, r24
  8c:	e2 95       	swap	r30
  8e:	f2 95       	swap	r31
  90:	f0 7f       	andi	r31, 0xF0	; 240
  92:	fe 27       	eor	r31, r30
  94:	e0 7f       	andi	r30, 0xF0	; 240
  96:	fe 27       	eor	r31, r30
  98:	ec 59       	subi	r30, 0x9C	; 156
  9a:	ff 4f       	sbci	r31, 0xFF	; 255
  9c:	e4 0f       	add	r30, r20
  9e:	f5 1f       	adc	r31, r21
  a0:	20 81       	ld	r18, Z
  a2:	22 23       	and	r18, r18
  a4:	11 f0       	breq	.+4      	; 0xaa <displaytMatrix+0x2e>
  a6:	88 bb       	out	0x18, r24	; 24
  a8:	02 c0       	rjmp	.+4      	; 0xae <displaytMatrix+0x32>
  aa:	20 e1       	ldi	r18, 0x10	; 16
  ac:	28 bb       	out	0x18, r18	; 24
  ae:	e9 ef       	ldi	r30, 0xF9	; 249
  b0:	f0 e0       	ldi	r31, 0x00	; 0
  b2:	31 97       	sbiw	r30, 0x01	; 1
  b4:	f1 f7       	brne	.-4      	; 0xb2 <displaytMatrix+0x36>
  b6:	00 c0       	rjmp	.+0      	; 0xb8 <displaytMatrix+0x3c>
  b8:	00 00       	nop
  ba:	01 96       	adiw	r24, 0x01	; 1
  bc:	80 31       	cpi	r24, 0x10	; 16
  be:	91 05       	cpc	r25, r1
  c0:	24 f3       	brlt	.-56     	; 0x8a <displaytMatrix+0xe>
  c2:	4f 5f       	subi	r20, 0xFF	; 255
  c4:	5f 4f       	sbci	r21, 0xFF	; 255
  c6:	40 31       	cpi	r20, 0x10	; 16
  c8:	51 05       	cpc	r21, r1
  ca:	dc f2       	brlt	.-74     	; 0x82 <displaytMatrix+0x6>
  cc:	08 95       	ret

000000ce <moveMaguire>:
  ce:	ef 92       	push	r14
  d0:	ff 92       	push	r15
  d2:	0f 93       	push	r16
  d4:	1f 93       	push	r17
  d6:	cf 93       	push	r28
  d8:	df 93       	push	r29
  da:	a0 91 60 00 	lds	r26, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
  de:	b0 91 61 00 	lds	r27, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
  e2:	10 97       	sbiw	r26, 0x00	; 0
  e4:	21 f4       	brne	.+8      	; 0xee <moveMaguire+0x20>
  e6:	8f 3f       	cpi	r24, 0xFF	; 255
  e8:	2f ef       	ldi	r18, 0xFF	; 255
  ea:	92 07       	cpc	r25, r18
  ec:	39 f0       	breq	.+14     	; 0xfc <moveMaguire+0x2e>
  ee:	ae 30       	cpi	r26, 0x0E	; 14
  f0:	b1 05       	cpc	r27, r1
  f2:	49 f4       	brne	.+18     	; 0x106 <moveMaguire+0x38>
  f4:	81 30       	cpi	r24, 0x01	; 1
  f6:	91 05       	cpc	r25, r1
  f8:	31 f4       	brne	.+12     	; 0x106 <moveMaguire+0x38>
  fa:	03 c0       	rjmp	.+6      	; 0x102 <moveMaguire+0x34>
  fc:	80 e0       	ldi	r24, 0x00	; 0
  fe:	90 e0       	ldi	r25, 0x00	; 0
 100:	02 c0       	rjmp	.+4      	; 0x106 <moveMaguire+0x38>
 102:	80 e0       	ldi	r24, 0x00	; 0
 104:	90 e0       	ldi	r25, 0x00	; 0
 106:	e0 90 62 00 	lds	r14, 0x0062	; 0x800062 <__DATA_REGION_ORIGIN__+0x2>
 10a:	f0 90 63 00 	lds	r15, 0x0063	; 0x800063 <__DATA_REGION_ORIGIN__+0x3>
 10e:	e1 14       	cp	r14, r1
 110:	f1 04       	cpc	r15, r1
 112:	21 f4       	brne	.+8      	; 0x11c <moveMaguire+0x4e>
 114:	6f 3f       	cpi	r22, 0xFF	; 255
 116:	ef ef       	ldi	r30, 0xFF	; 255
 118:	7e 07       	cpc	r23, r30
 11a:	41 f0       	breq	.+16     	; 0x12c <moveMaguire+0x5e>
 11c:	fe e0       	ldi	r31, 0x0E	; 14
 11e:	ef 16       	cp	r14, r31
 120:	f1 04       	cpc	r15, r1
 122:	49 f4       	brne	.+18     	; 0x136 <moveMaguire+0x68>
 124:	61 30       	cpi	r22, 0x01	; 1
 126:	71 05       	cpc	r23, r1
 128:	31 f4       	brne	.+12     	; 0x136 <moveMaguire+0x68>
 12a:	03 c0       	rjmp	.+6      	; 0x132 <moveMaguire+0x64>
 12c:	60 e0       	ldi	r22, 0x00	; 0
 12e:	70 e0       	ldi	r23, 0x00	; 0
 130:	02 c0       	rjmp	.+4      	; 0x136 <moveMaguire+0x68>
 132:	60 e0       	ldi	r22, 0x00	; 0
 134:	70 e0       	ldi	r23, 0x00	; 0
 136:	c0 e0       	ldi	r28, 0x00	; 0
 138:	d0 e0       	ldi	r29, 0x00	; 0
 13a:	1b c0       	rjmp	.+54     	; 0x172 <moveMaguire+0xa4>
 13c:	8a 01       	movw	r16, r20
 13e:	0e 0d       	add	r16, r14
 140:	1f 1d       	adc	r17, r15
 142:	9e 01       	movw	r18, r28
 144:	2a 0f       	add	r18, r26
 146:	3b 1f       	adc	r19, r27
 148:	22 95       	swap	r18
 14a:	32 95       	swap	r19
 14c:	30 7f       	andi	r19, 0xF0	; 240
 14e:	32 27       	eor	r19, r18
 150:	20 7f       	andi	r18, 0xF0	; 240
 152:	32 27       	eor	r19, r18
 154:	2c 59       	subi	r18, 0x9C	; 156
 156:	3f 4f       	sbci	r19, 0xFF	; 255
 158:	20 0f       	add	r18, r16
 15a:	31 1f       	adc	r19, r17
 15c:	f9 01       	movw	r30, r18
 15e:	10 82       	st	Z, r1
 160:	4f 5f       	subi	r20, 0xFF	; 255
 162:	5f 4f       	sbci	r21, 0xFF	; 255
 164:	02 c0       	rjmp	.+4      	; 0x16a <moveMaguire+0x9c>
 166:	40 e0       	ldi	r20, 0x00	; 0
 168:	50 e0       	ldi	r21, 0x00	; 0
 16a:	42 30       	cpi	r20, 0x02	; 2
 16c:	51 05       	cpc	r21, r1
 16e:	34 f3       	brlt	.-52     	; 0x13c <moveMaguire+0x6e>
 170:	21 96       	adiw	r28, 0x01	; 1
 172:	c2 30       	cpi	r28, 0x02	; 2
 174:	d1 05       	cpc	r29, r1
 176:	bc f3       	brlt	.-18     	; 0x166 <moveMaguire+0x98>
 178:	8a 0f       	add	r24, r26
 17a:	9b 1f       	adc	r25, r27
 17c:	c0 e6       	ldi	r28, 0x60	; 96
 17e:	d0 e0       	ldi	r29, 0x00	; 0
 180:	99 83       	std	Y+1, r25	; 0x01
 182:	88 83       	st	Y, r24
 184:	db 01       	movw	r26, r22
 186:	ae 0d       	add	r26, r14
 188:	bf 1d       	adc	r27, r15
 18a:	bb 83       	std	Y+3, r27	; 0x03
 18c:	aa 83       	std	Y+2, r26	; 0x02
 18e:	c0 e0       	ldi	r28, 0x00	; 0
 190:	d0 e0       	ldi	r29, 0x00	; 0
 192:	1b c0       	rjmp	.+54     	; 0x1ca <moveMaguire+0xfc>
 194:	fa 01       	movw	r30, r20
 196:	ea 0f       	add	r30, r26
 198:	fb 1f       	adc	r31, r27
 19a:	9e 01       	movw	r18, r28
 19c:	28 0f       	add	r18, r24
 19e:	39 1f       	adc	r19, r25
 1a0:	22 95       	swap	r18
 1a2:	32 95       	swap	r19
 1a4:	30 7f       	andi	r19, 0xF0	; 240
 1a6:	32 27       	eor	r19, r18
 1a8:	20 7f       	andi	r18, 0xF0	; 240
 1aa:	32 27       	eor	r19, r18
 1ac:	2c 59       	subi	r18, 0x9C	; 156
 1ae:	3f 4f       	sbci	r19, 0xFF	; 255
 1b0:	e2 0f       	add	r30, r18
 1b2:	f3 1f       	adc	r31, r19
 1b4:	71 e0       	ldi	r23, 0x01	; 1
 1b6:	70 83       	st	Z, r23
 1b8:	4f 5f       	subi	r20, 0xFF	; 255
 1ba:	5f 4f       	sbci	r21, 0xFF	; 255
 1bc:	02 c0       	rjmp	.+4      	; 0x1c2 <moveMaguire+0xf4>
 1be:	40 e0       	ldi	r20, 0x00	; 0
 1c0:	50 e0       	ldi	r21, 0x00	; 0
 1c2:	42 30       	cpi	r20, 0x02	; 2
 1c4:	51 05       	cpc	r21, r1
 1c6:	34 f3       	brlt	.-52     	; 0x194 <moveMaguire+0xc6>
 1c8:	21 96       	adiw	r28, 0x01	; 1
 1ca:	c2 30       	cpi	r28, 0x02	; 2
 1cc:	d1 05       	cpc	r29, r1
 1ce:	bc f3       	brlt	.-18     	; 0x1be <moveMaguire+0xf0>
 1d0:	df 91       	pop	r29
 1d2:	cf 91       	pop	r28
 1d4:	1f 91       	pop	r17
 1d6:	0f 91       	pop	r16
 1d8:	ff 90       	pop	r15
 1da:	ef 90       	pop	r14
 1dc:	08 95       	ret

000001de <init>:

/* all collisions/interceptions and gameplay logic will be handled later */

/* initialize all ports */
void init() {
	DDRB = 0xFF; // matrix row
 1de:	8f ef       	ldi	r24, 0xFF	; 255
 1e0:	87 bb       	out	0x17, r24	; 23
	DDRD = 0xFF; // matrix column
 1e2:	81 bb       	out	0x11, r24	; 17

	ball.dx = BALL_SPEED;
 1e4:	e4 e6       	ldi	r30, 0x64	; 100
 1e6:	f1 e0       	ldi	r31, 0x01	; 1
 1e8:	81 e0       	ldi	r24, 0x01	; 1
 1ea:	90 e0       	ldi	r25, 0x00	; 0
 1ec:	95 83       	std	Z+5, r25	; 0x05
 1ee:	84 83       	std	Z+4, r24	; 0x04
	ball.dy = BALL_SPEED;
 1f0:	97 83       	std	Z+7, r25	; 0x07
 1f2:	86 83       	std	Z+6, r24	; 0x06
	//ball.x = 2;
	//ball.y = 3;
	//matrix[ball.x][ball.y] = 1;
	maguire.x = 2;
 1f4:	e0 e6       	ldi	r30, 0x60	; 96
 1f6:	f0 e0       	ldi	r31, 0x00	; 0
 1f8:	82 e0       	ldi	r24, 0x02	; 2
 1fa:	90 e0       	ldi	r25, 0x00	; 0
 1fc:	91 83       	std	Z+1, r25	; 0x01
 1fe:	80 83       	st	Z, r24
	maguire.y = 3;
 200:	83 e0       	ldi	r24, 0x03	; 3
 202:	90 e0       	ldi	r25, 0x00	; 0
 204:	93 83       	std	Z+3, r25	; 0x03
 206:	82 83       	std	Z+2, r24	; 0x02
 208:	08 95       	ret

0000020a <main>:
}

int main(void)
{
    /* Replace with your application code */
	init();
 20a:	0e 94 ef 00 	call	0x1de	; 0x1de <init>
    while (1) 
    {
		
		displaytMatrix();
 20e:	0e 94 3e 00 	call	0x7c	; 0x7c <displaytMatrix>
		//moveBall();
		moveMaguire(1, 1);
 212:	61 e0       	ldi	r22, 0x01	; 1
 214:	70 e0       	ldi	r23, 0x00	; 0
 216:	81 e0       	ldi	r24, 0x01	; 1
 218:	90 e0       	ldi	r25, 0x00	; 0
 21a:	0e 94 67 00 	call	0xce	; 0xce <moveMaguire>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 21e:	8f e4       	ldi	r24, 0x4F	; 79
 220:	93 ec       	ldi	r25, 0xC3	; 195
 222:	01 97       	sbiw	r24, 0x01	; 1
 224:	f1 f7       	brne	.-4      	; 0x222 <main+0x18>
 226:	00 c0       	rjmp	.+0      	; 0x228 <main+0x1e>
 228:	00 00       	nop
 22a:	f1 cf       	rjmp	.-30     	; 0x20e <main+0x4>

0000022c <_exit>:
 22c:	f8 94       	cli

0000022e <__stop_program>:
 22e:	ff cf       	rjmp	.-2      	; 0x22e <__stop_program>
